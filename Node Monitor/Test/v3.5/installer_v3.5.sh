#!/bin/bash
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥ v3.5

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
INSTALL_DIR="$HOME/nod_monitor/v3.5"
MONITOR_SCRIPT_NAME="health_monitor_v3.5.sh" # –ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
CONFIG_FILE_NAME="config.json"
INSTALL_STATE_FILE=".install_state"

# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏
MONITOR_SCRIPT_PATH="$INSTALL_DIR/$MONITOR_SCRIPT_NAME"
CONFIG_FILE_PATH="$INSTALL_DIR/$CONFIG_FILE_NAME"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
C_HEADER='\033[95m'
C_OKGREEN='\033[92m'
C_WARNING='\033[93m'
C_FAIL='\033[91m'
C_ENDC='\033[0m'
C_BOLD='\033[1m'

# --- –£–¢–ò–õ–ò–¢–´ –í–´–í–û–î–ê ---
print_header() { echo -e "\n${C_HEADER}${C_BOLD}--- $1 ---${C_ENDC}"; }
print_success() { echo -e "${C_OKGREEN}‚úî $1${C_ENDC}"; }
print_warning() { echo -e "${C_WARNING}‚ö† $1${C_ENDC}"; }
print_error() { echo -e "${C_FAIL}‚úñ $1${C_ENDC}"; }

# --- –£–¢–ò–õ–ò–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
ensure_config_exists() {
    if [ ! -f "$CONFIG_FILE_PATH" ]; then
        print_warning "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ..."
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Å–æ –≤—Å–µ–º–∏ –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        echo '{
    "global": {
        "cosmos_directory_url": "https://rest.cosmos.directory",
        "missed_blocks_threshold": 10,
        "cron_interval_minutes": 15,
        "max_retries": 5,
        "retry_delay_seconds": 10,
        "delay_between_networks_seconds": 5
    },
    "telegram": {
        "bot_token": "",
        "alert_chat_ids": [],
        "report_chat_ids": [],
        "info_chat_ids": []
    },
    "networks": []
}' > "$CONFIG_FILE_PATH"
        print_success "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE_PATH"
    fi
}

# --- –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò ---

check_and_install_dependencies() {
    print_header "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    local needs_install=false
    local missing_packages=""
    for cmd in jq curl; do
        if ! command -v $cmd &> /dev/null; then
            print_warning "–ö–æ–º–∞–Ω–¥–∞ '$cmd' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            missing_packages+="$cmd "
            needs_install=true
        else
            print_success "'$cmd' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        fi
    done
    if [ "$needs_install" = true ]; then
        echo "–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã..."
        if command -v apt-get &> /dev/null; then sudo apt-get update && sudo apt-get install -y $missing_packages
        elif command -v yum &> /dev/null; then sudo yum install -y $missing_packages
        elif command -v pacman &> /dev/null; then sudo pacman -S --noconfirm $missing_packages
        else
            print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ($missing_packages) –≤—Ä—É—á–Ω—É—é."
            exit 1
        fi
        print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    fi
}

install_monitor() {
    print_header "2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    if [ ! -f "$MONITOR_SCRIPT_NAME" ]; then
        print_error "–û—à–∏–±–∫–∞: –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ '$MONITOR_SCRIPT_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        exit 1
    fi
    echo "–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $INSTALL_DIR"
    mkdir -p "$INSTALL_DIR"
    echo "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    cp "$MONITOR_SCRIPT_NAME" "$MONITOR_SCRIPT_PATH"
    ensure_config_exists
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."
    chmod +x "$MONITOR_SCRIPT_PATH"
    mkdir -p "$INSTALL_DIR/states"
    print_success "–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $INSTALL_DIR"
    touch "$INSTALL_DIR/$INSTALL_STATE_FILE"
}

setup_cron_job() {
    print_header "3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cron"
    if [ ! -f "$MONITOR_SCRIPT_PATH" ]; then
        print_error "–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        return
    fi
    ensure_config_exists
    local interval
    if jq -e '.global.cron_interval_minutes' "$CONFIG_FILE_PATH" > /dev/null; then
        interval=$(jq -r '.global.cron_interval_minutes' "$CONFIG_FILE_PATH")
        print_success "–ò–Ω—Ç–µ—Ä–≤–∞–ª ${interval} –º–∏–Ω—É—Ç –≤–∑—è—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
    else
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10): " interval
    fi
    if ! [[ "$interval" =~ ^[0-9]+$ ]]; then
        print_error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        return
    fi
    local cron_command="*/$interval * * * * cd $INSTALL_DIR && ./$MONITOR_SCRIPT_NAME >> cron.log 2>&1"
    (crontab -l 2>/dev/null | grep -v "$MONITOR_SCRIPT_NAME") | crontab -
    (crontab -l 2>/dev/null; echo "$cron_command") | crontab -
    print_success "–ó–∞–¥–∞—á–∞ Cron —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞! –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ $interval –º–∏–Ω—É—Ç."
    echo "–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª: $INSTALL_DIR/cron.log"
}

# --- –§–£–ù–ö–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

select_network() {
    print_header "–í—ã–±–æ—Ä —Å–µ—Ç–∏"
    mapfile -t networks < <(jq -r '.networks[].name' "$CONFIG_FILE_PATH")
    if [ ${#networks[@]} -eq 0 ]; then
        print_warning "–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç —Å–µ—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞."
        return 1
    fi
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏:"
    for i in "${!networks[@]}"; do echo "  $((i+1))) ${networks[$i]}"; done
    echo "  q) –û—Ç–º–µ–Ω–∞"
    local choice
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ç–∏: " choice
    if [[ "$choice" =~ ^[qQ]$ ]]; then return 1; fi
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#networks[@]}" ]; then
        print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."
        return 1
    fi
    REPLY=$((choice-1))
    return 0
}

configure_telegram() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram"
    ensure_config_exists
    read -p "–í–≤–µ–¥–∏—Ç–µ TELEGRAM_BOT_TOKEN: " token
    read -p "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤ –¥–ª—è ALERT (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): " alert_ids
    read -p "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤ –¥–ª—è REPORT (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): " report_ids
    read -p "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤ –¥–ª—è INFO (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): " info_ids
    local temp_json=$(mktemp)
    jq \
        --arg token "$token" \
        --argjson alert "[$(echo "$alert_ids" | sed 's/ /","/g;s/^/"/;s/$/"/')]" \
        --argjson report "[$(echo "$report_ids" | sed 's/ /","/g;s/^/"/;s/$/"/')]" \
        --argjson info "[$(echo "$info_ids" | sed 's/ /","/g;s/^/"/;s/$/"/')]" \
        '.telegram = {bot_token: $token, alert_chat_ids: $alert, report_chat_ids: $report, info_chat_ids: $info}' \
        "$CONFIG_FILE_PATH" > "$temp_json" && mv "$temp_json" "$CONFIG_FILE_PATH"
    print_success "Telegram —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω."
}

# ‚≠ê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
configure_global_settings() {
    print_header "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
    ensure_config_exists
    local current_threshold=$(jq -r '.global.missed_blocks_threshold' "$CONFIG_FILE_PATH")
    local current_retries=$(jq -r '.global.max_retries' "$CONFIG_FILE_PATH")
    local current_retry_delay=$(jq -r '.global.retry_delay_seconds' "$CONFIG_FILE_PATH")
    local current_net_delay=$(jq -r '.global.delay_between_networks_seconds' "$CONFIG_FILE_PATH")
    echo "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    read -p "–ü–æ—Ä–æ–≥ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ [${current_threshold}]: " threshold
    read -p "–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö [${current_retries}]: " retries
    read -p "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫) [${current_retry_delay}]: " retry_delay
    read -p "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ç–µ–π (—Å–µ–∫) [${current_net_delay}]: " net_delay
    threshold=${threshold:-$current_threshold}
    retries=${retries:-$current_retries}
    retry_delay=${retry_delay:-$current_retry_delay}
    net_delay=${net_delay:-$current_net_delay}
    local temp_json=$(mktemp)
    jq \
        --argjson threshold "$threshold" \
        --argjson retries "$retries" \
        --argjson retry_delay "$retry_delay" \
        --argjson net_delay "$net_delay" \
        '.global.missed_blocks_threshold = $threshold |
         .global.max_retries = $retries |
         .global.retry_delay_seconds = $retry_delay |
         .global.delay_between_networks_seconds = $net_delay' \
        "$CONFIG_FILE_PATH" > "$temp_json" && mv "$temp_json" "$CONFIG_FILE_PATH"
    print_success "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
}

# ‚≠ê –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
add_network() {
    print_header "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏"
    ensure_config_exists
    read -p "–ò–º—è —Å–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Nolus): " name
    read -p "VALOPER –∞–¥—Ä–µ—Å: " valoper
    read -p "VALCONS –∞–¥—Ä–µ—Å: " valcons
    read -p "–¢–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (@username): " tag
    read -p "REST URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è): " rest_url
    read -p "RPC URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è): " rpc_url
    local temp_json=$(mktemp)
    jq \
        --arg name "$name" --arg valoper "$valoper" --arg valcons "$valcons" --arg tag "$tag" --arg rest "$rest_url" --arg rpc "$rpc_url" \
        '.networks += [ { name: $name, valoper_address: $valoper, valcons_address: $valcons, user_tag: $tag } | if $rest != "" then . + {rest_url: $rest} else . end | if $rpc != "" then . + {rpc_url: $rpc} else . end ]' \
        "$CONFIG_FILE_PATH" > "$temp_json" && mv "$temp_json" "$CONFIG_FILE_PATH"
    print_success "–°–µ—Ç—å '$name' –¥–æ–±–∞–≤–ª–µ–Ω–∞."
}

# ‚≠ê –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
edit_network() {
    print_header "‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"
    ensure_config_exists
    local index
    select_network || return
    index=$REPLY
    local current_name=$(jq -r ".networks[$index].name" "$CONFIG_FILE_PATH")
    local current_valoper=$(jq -r ".networks[$index].valoper_address" "$CONFIG_FILE_PATH")
    local current_valcons=$(jq -r ".networks[$index].valcons_address" "$CONFIG_FILE_PATH")
    local current_tag=$(jq -r ".networks[$index].user_tag" "$CONFIG_FILE_PATH")
    local current_rest=$(jq -r ".networks[$index].rest_url // \"\"" "$CONFIG_FILE_PATH")
    local current_rpc=$(jq -r ".networks[$index].rpc_url // \"\"" "$CONFIG_FILE_PATH")
    echo "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ '$current_name'. –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    read -p "–ù–æ–≤–æ–µ –∏–º—è —Å–µ—Ç–∏ [${current_name}]: " name
    read -p "–ù–æ–≤—ã–π VALOPER –∞–¥—Ä–µ—Å [${current_valoper}]: " valoper
    read -p "–ù–æ–≤—ã–π VALCONS –∞–¥—Ä–µ—Å [${current_valcons}]: " valcons
    read -p "–ù–æ–≤—ã–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [${current_tag}]: " tag
    read -p "–ù–æ–≤—ã–π REST URL [${current_rest:-–Ω–µ –∑–∞–¥–∞–Ω}]: " rest_url
    read -p "–ù–æ–≤—ã–π RPC URL [${current_rpc:-–Ω–µ –∑–∞–¥–∞–Ω}]: " rpc_url
    name=${name:-$current_name}
    valoper=${valoper:-$current_valoper}
    valcons=${valcons:-$current_valcons}
    tag=${tag:-$current_tag}
    rest_url=${rest_url:-$current_rest}
    rpc_url=${rpc_url:-$current_rpc}
    local temp_json=$(mktemp)
    jq \
      --argjson index "$index" --arg name "$name" --arg valoper "$valoper" --arg valcons "$valcons" --arg tag "$tag" --arg rest "$rest_url" --arg rpc "$rpc_url" \
      '.networks[$index] = ( { name: $name, valoper_address: $valoper, valcons_address: $valcons, user_tag: $tag } | if $rest != "" then . + {rest_url: $rest} else . end | if $rpc != "" then . + {rpc_url: $rpc} else . end )' \
      "$CONFIG_FILE_PATH" > "$temp_json" && mv "$temp_json" "$CONFIG_FILE_PATH"
    print_success "–°–µ—Ç—å '$name' –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
}

delete_network() {
    print_header "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∏"
    ensure_config_exists
    local index
    select_network || return
    index=$REPLY
    local network_name=$(jq -r ".networks[$index].name" "$CONFIG_FILE_PATH")
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç—å '$network_name'? (y/n): " confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
        echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        return
    fi
    local temp_json=$(mktemp)
    jq --argjson index "$index" 'del(.networks[$index])' "$CONFIG_FILE_PATH" > "$temp_json" && mv "$temp_json" "$CONFIG_FILE_PATH"
    print_success "–°–µ—Ç—å '$network_name' —É–¥–∞–ª–µ–Ω–∞."
}

list_config() {
    print_header "üìÑ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ($CONFIG_FILE_PATH)"
    ensure_config_exists
    jq '.' "$CONFIG_FILE_PATH"
}

uninstall_monitor() {
    print_header "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã ($INSTALL_DIR) –∏ –∑–∞–¥–∞—á—É cron? (y/n): " choice
    if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
        echo "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ cron..."
        (crontab -l 2>/dev/null | grep -v "$MONITOR_SCRIPT_NAME") | crontab -
        print_success "–ó–∞–¥–∞—á–∞ cron —É–¥–∞–ª–µ–Ω–∞."
        echo "–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        rm -rf "$INSTALL_DIR"
        print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $INSTALL_DIR —É–¥–∞–ª–µ–Ω–∞."
        print_success "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
    else
        echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    fi
}

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
main_menu() {
    while true; do
        if [ ! -f "$INSTALL_DIR/$INSTALL_STATE_FILE" ]; then
            print_header "–ú–µ–Ω—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
            echo "1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—à–∞–≥–∏ 1-3)"
            echo "q) –í—ã—Ö–æ–¥"
        else
            print_header "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
            echo "--- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---"
            echo "1) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            echo "2) –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã (–æ–±–Ω–æ–≤–∏—Ç—å)"
            echo "3) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É Cron"
            echo "--- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---"
            echo "4) üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram"
            echo "5) üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            echo "6) ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç—å"
            echo "7) ‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å"
            echo "8) ‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Ç—å"
            echo "9) üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥"
            echo "--- –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ---"
            echo "10) ‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            echo "q) –í—ã—Ö–æ–¥"
        fi

        read -p "–í–∞—à –≤—ã–±–æ—Ä: " choice

        if [ ! -f "$INSTALL_DIR/$INSTALL_STATE_FILE" ]; then
            case $choice in
                1) check_and_install_dependencies; install_monitor; setup_cron_job; print_success "–ë–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç–∏.";;
                q|Q) echo "–í—ã—Ö–æ–¥."; break ;;
                *) print_warning "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." ;;
            esac
        else
            case $choice in
                1) check_and_install_dependencies ;;
                2) install_monitor ;;
                3) setup_cron_job ;;
                4) configure_telegram ;;
                5) configure_global_settings ;;
                6) add_network ;;
                7) edit_network ;;
                8) delete_network ;;
                9) list_config ;;
                10) uninstall_monitor; break ;;
                q|Q) echo "–í—ã—Ö–æ–¥."; break ;;
                *) print_warning "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." ;;
            esac
        fi
    done
}

# --- –ó–ê–ü–£–°–ö ---
main_menu
